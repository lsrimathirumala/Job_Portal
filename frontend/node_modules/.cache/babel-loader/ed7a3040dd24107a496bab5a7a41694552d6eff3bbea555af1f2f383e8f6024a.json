{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\30144\\\\DS JobPortal\\\\frontend\\\\src\\\\pages\\\\ApplicationListPage.js\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect, useState } from 'react';\nimport api from '../api';\nimport { AuthContext } from '../App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ApplicationListPage() {\n  _s();\n  const {\n    user\n  } = useContext(AuthContext);\n  const [applications, setApplications] = useState([]);\n  useEffect(() => {\n    fetchApplications();\n  }, [user]);\n  async function fetchApplications() {\n    try {\n      let params = {};\n      if (user.role === 'candidate') {\n        params.candidateId = user.id;\n      }\n      // For employer, ideally filter applications by jobs posted - not implemented in frontend here\n      const res = await api.get('/applications', {\n        params\n      });\n      setApplications(res.data.applications);\n    } catch {\n      alert('Failed to load applications');\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Your Applications\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), applications.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No applications found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: applications.map(({\n        _id,\n        jobId,\n        status,\n        appliedAt\n      }) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: jobId === null || jobId === void 0 ? void 0 : jobId.jobTitle\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 15\n        }, this), \" at \", jobId === null || jobId === void 0 ? void 0 : jobId.company, \" - Status: \", status, \" - Applied:\", ' ', new Date(appliedAt).toLocaleDateString()]\n      }, _id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(ApplicationListPage, \"2tyVOXMx4Mb9RGQRh+aH31ToZr8=\");\n_c = ApplicationListPage;\nvar _c;\n$RefreshReg$(_c, \"ApplicationListPage\");","map":{"version":3,"names":["React","useContext","useEffect","useState","api","AuthContext","jsxDEV","_jsxDEV","ApplicationListPage","_s","user","applications","setApplications","fetchApplications","params","role","candidateId","id","res","get","data","alert","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","_id","jobId","status","appliedAt","jobTitle","company","Date","toLocaleDateString","_c","$RefreshReg$"],"sources":["C:/Users/30144/DS JobPortal/frontend/src/pages/ApplicationListPage.js"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\r\nimport api from '../api';\r\nimport { AuthContext } from '../App';\r\n\r\nexport default function ApplicationListPage() {\r\n  const { user } = useContext(AuthContext);\r\n  const [applications, setApplications] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchApplications();\r\n  }, [user]);\r\n\r\n  async function fetchApplications() {\r\n    try {\r\n      let params = {};\r\n      if (user.role === 'candidate') {\r\n        params.candidateId = user.id;\r\n      }\r\n      // For employer, ideally filter applications by jobs posted - not implemented in frontend here\r\n      const res = await api.get('/applications', { params });\r\n      setApplications(res.data.applications);\r\n    } catch {\r\n      alert('Failed to load applications');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div style={{ padding: 20 }}>\r\n      <h2>Your Applications</h2>\r\n      {applications.length === 0 ? (\r\n        <p>No applications found</p>\r\n      ) : (\r\n        <ul>\r\n          {applications.map(({ _id, jobId, status, appliedAt }) => (\r\n            <li key={_id}>\r\n              <strong>{jobId?.jobTitle}</strong> at {jobId?.company} - Status: {status} - Applied:{' '}\r\n              {new Date(appliedAt).toLocaleDateString()}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC9D,OAAOC,GAAG,MAAM,QAAQ;AACxB,SAASC,WAAW,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErC,eAAe,SAASC,mBAAmBA,CAAA,EAAG;EAAAC,EAAA;EAC5C,MAAM;IAAEC;EAAK,CAAC,GAAGT,UAAU,CAACI,WAAW,CAAC;EACxC,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEpDD,SAAS,CAAC,MAAM;IACdW,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,CAACH,IAAI,CAAC,CAAC;EAEV,eAAeG,iBAAiBA,CAAA,EAAG;IACjC,IAAI;MACF,IAAIC,MAAM,GAAG,CAAC,CAAC;MACf,IAAIJ,IAAI,CAACK,IAAI,KAAK,WAAW,EAAE;QAC7BD,MAAM,CAACE,WAAW,GAAGN,IAAI,CAACO,EAAE;MAC9B;MACA;MACA,MAAMC,GAAG,GAAG,MAAMd,GAAG,CAACe,GAAG,CAAC,eAAe,EAAE;QAAEL;MAAO,CAAC,CAAC;MACtDF,eAAe,CAACM,GAAG,CAACE,IAAI,CAACT,YAAY,CAAC;IACxC,CAAC,CAAC,MAAM;MACNU,KAAK,CAAC,6BAA6B,CAAC;IACtC;EACF;EAEA,oBACEd,OAAA;IAAKe,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAG,CAAE;IAAAC,QAAA,gBAC1BjB,OAAA;MAAAiB,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACzBjB,YAAY,CAACkB,MAAM,KAAK,CAAC,gBACxBtB,OAAA;MAAAiB,QAAA,EAAG;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,gBAE5BrB,OAAA;MAAAiB,QAAA,EACGb,YAAY,CAACmB,GAAG,CAAC,CAAC;QAAEC,GAAG;QAAEC,KAAK;QAAEC,MAAM;QAAEC;MAAU,CAAC,kBAClD3B,OAAA;QAAAiB,QAAA,gBACEjB,OAAA;UAAAiB,QAAA,EAASQ,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEG;QAAQ;UAAAV,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAS,CAAC,QAAI,EAACI,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEI,OAAO,EAAC,aAAW,EAACH,MAAM,EAAC,aAAW,EAAC,GAAG,EACvF,IAAII,IAAI,CAACH,SAAS,CAAC,CAACI,kBAAkB,CAAC,CAAC;MAAA,GAFlCP,GAAG;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGR,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CACL;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACnB,EAAA,CAvCuBD,mBAAmB;AAAA+B,EAAA,GAAnB/B,mBAAmB;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}